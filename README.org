* Neovim Configuration for Sysadmin/DevOps
  :PROPERTIES:
  :CREATED:  <2025-07-10 Thu>
  :END:

  This Neovim configuration is optimized for sysadmin and DevOps tasks on Arch Linux, focusing on Ansible, Python, Kubernetes, Terraform, and Org-mode for task management. It uses ~lazy.nvim~ for plugin management, ~coq.nvim~ for completions, ~surround-ui.nvim~ for text manipulation, and ~lazygit.nvim~ for Git operations, with LSP support for multiple languages.

** Overview
   - *Purpose*: Streamline editing of Ansible playbooks, Python scripts, Terraform configs, Kubernetes manifests, and Org-mode notes.
   - *Key Features*:
     - Fast autocompletion with ~coq.nvim~.
     - LSP diagnostics for Ansible (~ansiblels~), Python (~pylsp~), Terraform (~terraformls~), and YAML (~yamlls~).
     - Text manipulation with ~surround-ui.nvim~ (e.g., add/remove quotes).
     - Recent file navigation with ~arena.nvim~.
     - Task management with ~nvim-orgmode~.
     - Git integration with ~lazygit.nvim~ and ~vim-fugitive~.
     - Seamless ~tmux~ integration.
   - *Theme*: ~tokyonight~ with transparency.

** Installation
   #+BEGIN_SRC bash
   # Install Neovim and dependencies
   sudo pacman -S neovim gcc curl python python-pipx nodejs npm lazygit

   # Install LSP servers and tools
   pipx install 'python-lsp-server[all]' ansible-lint
   npm install -g @ansible/ansible-language-server yaml-language-server
   sudo pacman -S terraform-ls

   # Clone or copy config
   git clone <your-repo> ~/.config/nvim || cp -r <config-dir> ~/.config/nvim
   chmod -R u+rw ~/.config/nvim

   # Sync plugins in Neovim
   nvim --headless -c 'Lazy sync' -c 'TSUpdate' -c 'COQdeps' -c 'qall'
   #+END_SRC

** Plugins
   - *Completion*: ~coq.nvim~ with LSP, snippets, and third-party sources.
   - *LSP*: ~nvim-lspconfig~ for ~pylsp~, ~terraformls~, ~ansiblels~, ~yamlls~.
   - *Text Manipulation*: ~surround-ui.nvim~ with ~which-key~ menu.
   - *File Navigation*: ~arena.nvim~ for recent YAML files.
   - *Task Management*: ~nvim-orgmode~ with ~org-bullets~ and ~headlines~.
   - *Git*: ~lazygit.nvim~ for TUI Git client, ~vim-fugitive~ for Git commands.
   - *Syntax*: ~nvim-treesitter~ for Python, YAML, Bash, JSON, Dockerfile, HCL, Lua.
   - *Navigation*: ~vim-tmux-navigator~.
   - *UI*: ~vim-airline~, ~tokyonight~, ~noice.nvim~, ~nvim-tree~.

** Keybindings
   | Key            | Action                                    | Plugin/Feature       |
   |----------------+-------------------------------------------+---------------------|
   | ~<Leader>gg~   | Open lazygit TUI                          | lazygit.nvim        |
   | ~<Space>s~     | Open surround menu (add/delete/change)    | surround-ui.nvim    |
   | ~<C-Space>~    | Trigger completion                        | coq.nvim            |
   | ~<C-j>~        | Jump to snippet placeholder               | coq.nvim            |
   | ~<Space>al~    | Run ansible-lint                          | ansible-lint        |
   | ~<Space>af~    | Run ansible-lint with --fix               | ansible-lint        |
   | ~<Space>ab~    | Toggle recent files (YAML)                | arena.nvim          |
   | ~<Space>oa~    | Open Org agenda                           | nvim-orgmode       |
   | ~<Space>oc~    | Org capture                               | nvim-orgmode       |
   | ~<Space>oh~    | Toggle Org heading                        | nvim-orgmode       |
   | ~<Space>ox~    | Toggle Org checkbox                       | nvim-orgmode       |
   | ~<Space>e~     | Toggle file explorer                      | nvim-tree           |
   | ~<Space>ff~    | Find files                                | telescope.nvim      |
   | ~<Space>fg~    | Live grep                                 | telescope.nvim      |
   | ~<Space>fb~    | List buffers                              | telescope.nvim      |
   | ~<Space>ys~    | Select YAML schema                        | yaml-companion      |
   | ~<Space>nd~    | Dismiss notifications                     | noice.nvim          |
   | ~<C-h/j/k/l>~  | Navigate tmux/vim splits                  | tmux-navigator      |
   | ~<Leader>kp~   | Kubectl get pods                          | vimkubectl          |
   | ~<Leader>kd~   | Kubectl describe                          | vimkubectl          |
   | ~<Leader>ka~   | Kubectl apply                             | vimkubectl          |

** Usage Examples
   *** Git Operations
     - Open ~lazygit~: Press ~<Leader>gg~ to launch TUI.
     - Stage hunks: Use ~s~ to stage, ~u~ to unstage.
     - Commit: Press ~c~, write message, ~<Enter>~ to commit.
     - Push: Press ~P~ to push to remote.
     - Use with ~vim-fugitive~: Run ~:G status~ for alternative Git interface.

   *** Ansible Playbook
     #+BEGIN_SRC yaml
     - name: Install Nginx
       hosts: webservers
       tasks:
         - name: Ensure Nginx is installed
           ansible.builtin.package:
             name: nginx
             state: present
     #+END_SRC
     - Completion: Type ~ansible.builtin.pa~ and press ~<C-Space>~ to complete ~package~.
     - Surround: Place cursor on ~nginx~, press ~<Space>s~, select "Add", enter ~"~ (~ysiw"~).
     - Lint: Run ~<Space>al~ to check with ~ansible-lint~ or ~<Space>af~ to auto-fix.
     - Commit: Use ~<Leader>gg~ to stage and commit playbook.

   *** Python Script
     #+BEGIN_SRC python
     import numpy as np
     array = np.array([1, 2, 3])
     #+END_SRC
     - Completion: Type ~np.ar~ and press ~<C-Space>~ to complete ~array~.
     - Surround: Wrap ~[1, 2, 3]~ with parentheses (~ysiw(~).
     - Diagnostics: ~pylsp~ provides ~flake8~ and ~pylint~ errors.
     - Commit: Use ~<Leader>gg~ to manage changes.

   *** Terraform Config
     #+BEGIN_SRC hcl
     resource "aws_instance" "example" {
       ami           = "ami-12345678"
       instance_type = "t2.micro"
     }
     #+END_SRC
     - Completion: Type ~res~ and press ~<C-Space>~ for ~resource~.
     - Surround: Quote ~ami-12345678~ with ~<Space>s~ (~ysiw"~).
     - Commit: Use ~<Leader>gg~ to stage and push.

   *** Org-mode Notes
     #+BEGIN_SRC org
     * TODO Deploy Nginx
       DEADLINE: <2025-07-10 Thu>
       - [ ] Write playbook (<Space>al to lint)
       - [ ] Test with Kubernetes (<Leader>kp)
     #+END_SRC
     - Agenda: ~<Space>oa~.
     - Capture: ~<Space>oc~.
     - Checkbox: ~<Space>ox~.
     - Surround: Add emphasis (~<Space>s~, select "Add", enter ~*~).
     - Commit: Track changes with ~<Leader>gg~.

** Troubleshooting
   - *Lazygit*: Ensure ~lazygit~ is installed:
     #+BEGIN_SRC bash
     which lazygit
     lazygit --version
     #+END_SRC
   - *LSP Errors*: Check ~:LspInfo~ and ensure servers (~pylsp~, ~terraformls~, etc.) are in ~$PATH~.
     #+BEGIN_SRC bash
     which pylsp terraform-ls ansible-language-server yaml-language-server
     #+END_SRC
   - *Treesitter*: Verify parsers with ~:TSInstallInfo~. Reinstall with ~:TSUpdate~.
   - *coq.nvim*: Run ~:COQstats~ or ~:COQdeps~ to check completion status.
   - *Key Conflicts*: Check mappings with ~:map <Leader>gg~ or ~:map <Space>s~.
   - *Logs*: Review ~:LspLog~ or ~:checkhealth~.

** CI/CD Integration
   #+BEGIN_SRC yaml
   name: Neovim Setup
   on: [pull_request]
   jobs:
     setup:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v4
         - name: Install Neovim and dependencies
           run: sudo apt-get install neovim gcc curl python3 python3-pip lazygit
         - name: Install pipx
           run: |
             pip3 install pipx
             pipx ensurepath
         - name: Install tools
           run: |
             pipx install 'python-lsp-server[all]' ansible-lint
             npm install -g @ansible/ansible-language-server yaml-language-server
             sudo apt-get install terraform-ls
         - name: Sync plugins
           run: nvim --headless -c 'Lazy sync' -c 'TSUpdate' -c 'COQdeps' -c 'qall'
   #+END_SRC

** Customization
   - *Snippets*: Add to ~~/.config/nvim/coq-user-snippets/<filetype>.json~.
     #+BEGIN_SRC json
     {
       "ansible_service": {
         "prefix": "service",
         "body": [
           "- name: Manage service",
           "  ansible.builtin.service:",
           "    name: $1",
           "    state: $2"
         ],
         "description": "Ansible service module"
       }
     }
     #+END_SRC
     Reload: ~:COQsnips compile~.
   - *Surround*: Add quick quote mapping in ~keymaps.lua~:
     #+BEGIN_SRC lua
     vim.keymap.set('n', '<leader>sq', 'ysiw"', { noremap = true, silent = true })
     #+END_SRC
   - *Arena*: Include Terraform/Org files:
     #+BEGIN_SRC lua
     include = { '%.yml$', '%.yaml$', '%.tf$', '%.org$' }
     #+END_SRC
   - *Lazygit*: Customize floating window in ~lazygit.lua~:
     #+BEGIN_SRC lua
     vim.g.lazygit_floating_window_border_chars = {'╒', '═', '╕', '│', '╛', '═', '╘', '│'}
     #+END_SRC

** License
   MIT License. See ~LICENSE~ file (if
